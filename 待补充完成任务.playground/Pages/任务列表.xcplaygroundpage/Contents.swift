
/*:
 ### 1. 编写图片上传策略
 
 目标：针对情况图片存储到其他服务，为后台减负，来达到一个服务质量的调整
 逻辑：
 1. 创建任务，设置最大并行上传数量
 2. 将每张图片的信息唯一标识作为Key， 对应的任务设置为value,存放到一个map钟进行映射
 3. 每次上传，如果上传成功就将返回的url与key 重新拼接构建另一个map
 4. 如果上传失败就需要下次重新上传或者进行断点续传，上传成功后再进行其他信息配置
 5. 如果同一个上传连续失败三次就不再进行上传了，需要用户进行一些处理后再度进行上传
 6. 都上传成功后就要返回一个成功后的图片标识对应图片URL信息
 7. 注意上传图片的顺序和成功后返回的URL信息必须一一对应
 8. 同时需要考虑的点有图片压缩功能，尺寸调整大小功能
 
 
 
 ### 2. 指针函数使用
 



 ### 3. 函数指针怎么使用
 
 
 
 
 ### 4. App优化
 1. 包体积优化【指的是下载的包，不是上传的】
 
    1.1 冗余图片
 
    1.2 冗余代码【类，方法】
 
    1.3 Apple 的App Thinning
 
 2. 启动速度优化
 
 启动耗时点：
    1.1 动态链接库
    1.2 符号绑定
    1.3 ObjC 类初始化
    1.4 初始化
    1.5 慢加载
    1.6 系统库加载
    1.7 主线程检查
 
 优化点：
    1.1 减少自定义的动态库集成
    1.2 精简原有的Objective-C类和代码
    1.3 移除静态的初始化操作
    1.4 使用更多的Swift代码
 
 3. 方法执行时间监测
    原理：hook msg_send 方法，让消息直接转发，自定义转发实现，然后在内部对消息发送进行时间监听
 
 4. 逻辑优化
 
 
 
 ### 5. 正则表达式使用
 
 
 
 
 ### 6. 图文混排
 
 
 
 
 ### 7. 编码
 



 ### 8. APP进入后台执行计时器
 



 ### 9. iOS App 怎样去判断当前APP是否被抓包了，同时需要避免使用了VPN的情况
1. 需要通晓什么情况下被抓爆了
2. 使用了VPN和直接抓包配置代理的区别点是什么
 
 
 
 
 ### 10. C语言中常量和静态变量的使用优势分别在哪
 
 
 
 ### 11. swift 字典打印内部内容
 1. 当前的字典打印层级关系太过晦涩
 
 
 
 ### 12. JSON结构
 
 
 ### 13. 类和元类
    1. 两者区别点体现在哪里
    2. 两者功能用途怎样体现
    3. 为什么要设计成两个，而不是合并在一起
 */


//: [Next](@next)

